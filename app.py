import os 
import sys
sys.path += ['./']
import random
import streamlit as st
from Main import Main

@st.cache(suppress_st_warning=True)
def get_ques_and_context(doc_name) :

    st.write("FUNCTION EXECUTED!!!!")
    print("RAN")
    # Here call the function to get the questions and contexts for those questions
    # generated_questions_and_contexts = [['question1', 'context1'], ['question2', 'context2']]
    generated_questions_and_contexts = Main.get_questions_and_contexts_given_the_doc(doc_name)
    return generated_questions_and_contexts

@st.cache(suppress_st_warning=True)
def get_answers_for_questions(generated_questions_and_contexts) :

    # answers = ["answer1", "answer2"]
    answers = Main.get_answer_given_the_question_and_context_list(generated_questions_and_contexts)
    return answers

# Print the title
st.title("Question Answering system for Legal Documents")
st.write("---")

# Select the Mode of Operation
st.header("Select the mode of operation :")
modes = ['Questions Generated by Model', 'Input Questions from user']
mode_of_operation = st.radio("", range(len(modes)), format_func = lambda x: modes[x])

if mode_of_operation == 0 :

    # Print the dropdown list for selecting the doc
    st.header("Choose a legal doc :")
    st.write(" ")
    legal_docs_names = os.listdir("./legal_docs/")
    doc_name = st.selectbox("", [legal_doc.replace(".pdf", "") for legal_doc in legal_docs_names])
    doc_name = doc_name + ".pdf"
    # print("YOYOOYOYOOYYOYOYYO")

    with st.spinner("Working...") :

        # Here call the function to get the questions and contexts for those questions
        generated_questions_and_contexts = get_ques_and_context(doc_name)
        random.shuffle(generated_questions_and_contexts)
        generated_questions_and_contexts = generated_questions_and_contexts[:10]
        # Here call the function to get the answer, given the context and question
        answers = get_answers_for_questions(generated_questions_and_contexts)

    # List the generated questions
    st.header("List of generated questions :")
    st.write(" ")
    question_numbers = list(range(len(generated_questions_and_contexts)))
    selected_question = st.selectbox("", question_numbers, \
        format_func = lambda x: generated_questions_and_contexts[x][0])

    # Print the selected question
    st.header("Question :")
    st.markdown("---\n" f"{generated_questions_and_contexts[selected_question][0]}\n\n" "---")

    # Print the context corresponding to that answer
    st.header("Context :")
    st.markdown("---\n" f"{generated_questions_and_contexts[selected_question][1]}\n\n" "---")

    # Print the answer
    st.header("Answer :")
    st.markdown("---\n" f"{answers[selected_question]}\n\n" "---")

elif mode_of_operation == 1 :

    # Print the dropdown list for selecting the doc
    st.header("Choose a legal doc :")
    st.write(" ")
    legal_docs_names = os.listdir("./legal_docs/")
    st.selectbox("", [legal_doc.replace(".pdf", "") for legal_doc in legal_docs_names])

    # Input the question from the user
    st.header("Enter a Question :")
    question = st.text_area("")

    st.write(" ")
    if st.button("Generate questions and answers") :

        with st.spinner("Working...") :
            # Here call the function to get the answer, given the context and question
            generated_questions_and_contexts = [['question1', 'context1'], ['question2', 'context2']]
            answer = "answer1"

        # Print the context corresponding to that answer
        st.header("Context :")
        st.markdown("---\n" f"{question}\n\n" "---")
        
        # Print the context corresponding to that answer
        # Here call the function to get the answer, given the context and question
        answer = "answer1"
        st.header("Answer :")
        st.markdown("---\n" f"{answer}\n\n" "---")

